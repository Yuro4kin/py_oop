# 2. Объявите класс Rectangle, хранящий координаты верхней левой и правой нижней точек.
# Создайте дескрипторы для записи и считывания этих значений в классе (атрибуты с данными координат должны быть приватными).

class Rectangle:

    def __init__(self, x = 0, y = 0):         # объявлен один конструктор
        self.__x = (2, 8); self.__y = (2, 12) # два private атрибута


                                              # Добавим проверку на корректность передаваемых данных в методе __checkValue и методе __set pointUp
    def __checkValue (x):                     # объявлен приватный метод __checkValue внутри класса Rectangle, который будет проверять наше значение x, является ли оно числом или не является
                                              # self - не пишется, т.к. сам метод не будет обращаться к какой-либо локальной переменной экземпляра нашего класса
        if isinstance(x, int) or isinstance(x, float): # с помощью ф-ции isinstance проверяем, что x является типом int или float и тоже самое для y
            return True                       # если это так возвращаем True
        return False                          # иначе возвращено False


    # Внутри класса Rectangle создадим спец. метод -  для записи другого значения, если хотим изменить координату
    # Получился метод публичный, открытый get pointUp через который мы можем менять значение закрытых атрибутов __x, __y

    # объявление св-в через декораторы
    @property                               # декоратор property перед нашим геттером, имя геттера __getpointUp - меняет на имя св-ва pointUp
    def pointUp(self):                      # будет называться также, как и будет называться св-во pointUp, которое закоментировано ниже
        return self.__x                     # будем возвращать кортеж этих значений

    @property                               # декоратор property перед нашим геттером, имя геттера __getpointDown - меняет на имя св-ва pointDown
    def pointDown(self):                    # будет называться также, как и будет называться св-во pointDown, которое закоментировано ниже
        return self.__y                     # будем возвращать кортеж этих значений

    # Внутри класса Rectangle создадим спец. метод -  для записи другого значения, если хотим изменить координату
    # Получился метод публичный, открытый setpointUp,  через который мы можем менять значение закрытых атрибутов __x, __y

    @pointUp.setter                         # укажем что этот метод будет сеттером, записываем декоратор будет pointUp ставим . и далее пишем setter
    def pointUp(self, x):                   # меняем название метода на pointUp
        if Rectangle.__checkValue(x):       # добавим проверку перед
            self.__x = x                    # внутри метода setpointUp через два параметра мы можем обращаться к этим закрытым св-вам
                                            # --- будем присваивать закрытому св-ву__x значение в том случае, если оно действительно является числом
        else:                               # --- если не число, то будет вызываться сообщение "Неверный формат данных"
            raise ValueError("Неверный формат данных")

    @pointDown.setter                       # укажем что этот метод будет сеттером, записываем декоратор будет pointDown ставим . и далее пишем setter
    def pointDown(self, x):                 # меняем название метода на pointDown
        if Rectangle.__checkValue(x):       # добавим проверку пере
            self.__x = x                    # внутри метода setpointUpLeft через два параметра мы можем обращаться к этим закрытым св-вам
                                            # --- будем присваивать закрытому св-ву__x значение в том случае, если оно действительно является числом
        else:                               # --- если не число, то будет вызываться сообщение "Неверный формат данных"
            raise ValueError("Неверный формат данных")

pt = Rectangle()                            # создавая экземпляры pt, pt1, класса Rectangle они непосредственно обращаются к свойству  pointUpLeft = (2, 8)
pt1 = Rectangle()                           # создавая экземпляры pt, pt1, класса Rectangle они непосредственно обращаются к свойству  pointDownRight = (2, 12)
print( pt.pointUp, pt1.pointDown )          # вывод в консоль (2, 8) (2, 12)

Rectangle.pointUp = (1 , 9)                 # изменим значение pointUpLeft = (1,9) в классе Rectangle
Rectangle.pointDown = (1 , 13)              # изменим значение pointDownRight = (1,13) в классе Rectangle
pt = Rectangle()                            # создавая экземпляры pt, pt1, класса Rectangle они непосредственно обращаются к измененному свойству pointUpLeft = (1 , 9)
pt1 = Rectangle()                           # экземпляры получают доступ к этой переменной непосредственно из класса Point
print(pt.pointUp, pt1.pointDown)            # вывод в консоль (1, 9) (1, 13)

pt.pointUp = (0, 10)                        # в экземпляре pt создадим новое св-во pointUpLeft которое не будет связано с св-вом pointUpLeft в классе Rectangle
pt1.pointDown = (0, 14)                     # в экземпляре pt1 создадим новое св-во pointDownRight которое не будет связано с св-вом pointDownRight в классе Rectangle
print( pt.pointUp, pt1.pointDown )          # вывод в консоль (0, 10) (0, 14)


pt3 = Rectangle(1, 2)                           # вызвали конструктор, когда создали экземпляр классa pt
pt3.pointDown = (100, 200, 300, 400)        # запись значения - будет вызываться сеттер метод def __setCoordX
#pt3.pointDown = "100"                      # условие оказалось ложным и было выполнено условие нашего сеттера - ValueError: Неверный формат данных
x = pt3.pointDown                           # чтение значения - считываться с него информация - будет вызываться геттер - метод __getCoordX
print(x)






# Дескрипторы это класс в котором определены следующие специальные методы
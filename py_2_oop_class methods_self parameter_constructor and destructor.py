#   class <Имя класса>:
#         данные (атрибуты)
#         методы (функции)
# Класс содержит две вещи: атрибуты (свойства) и методы.
# Атрибуты – это переменные класса, а методы – это функции, реализующие определенную логику т.е, функциональность класса
# Далее, мы будем использовать термин метод, подразумевая под ним функцию класса.
# Имена методов, обычно, являются глаголами, т.к. выполняют определенные действия.
# Имена атрибутов – это существительные, т.к. лишь хранят определенные данные.

# Зададим в классе Point метод setCoords
class Point:
    x = 1; y = 1
    def setCoords(self, x, y): # любой метод объявленный внутри класса имеет параметр self, ( x, y - передали в качестве следующих параметров)
        self.a = x             # с помощью метода setCoords можем переопределять координаты точки класса Point и присвоим переданное значение x, y
        self.b = y
#       print(self.__dict__)   # вывод всех локальных переменных self
#        pass

pt = Point()               # параметр self - если дальше создадим экземпляр класса и

#pt.x = 5                  # Проверка выведем список локальных атрибутов экземпляров на которые ссылается переменная self
#pt.y = 10                 # Создали две локальные переменные x, y - чтоб было что выводить
                           # Если метод setCoords() выведет две локальные переменные, то значит self будет ссылаться
                           # на экземпляр класса pt - на выходе получим список из двух локальных переменных

#pt.setCoords()            # через этот экземпляр вызовем этот метод.
                           # При вызове метода setCoords() параметр self будет ссылаться на экземпляр класса - pt
                           # в круглых скобках self указывать не нужно pt.setCoords(), Python делает автоматически

pt.setCoords(5, 10)        # Создадутся две локальные переменные  x, y - внутри экземпляра класса pt
#Point.setCoords(pt, 6, 9) # pt.setCoords(5, 10)  = Point.setCoords(pt, 6, 9)  - строки эквивалентны между собой
print(pt.__dict__)         # выведем переменные x, y. __dict__ - содержит две локальные созданные переменные x, y
                           # self.a = x self.b = y - можем переназвать переменные x, y в строке выше на a, b
                           # Через self можно создавать локальные переменные для конкретного экземпляра класса, т.е.
                           # переменные a и b принадлежат только этому экземпляру класса и не связана с классом Point
                           # что ожидается от объекта pt.


pt1 = Point()              # Метод setCoords общий для всех возможных экземпляров класса Point
pt2 = Point()              # Если бы у нас было несколько экземпляров класса, то для каждого из них метод setCoords был бы общий
                           # Когда создаем экземпляры класса, то метод вызывается из класса Point
                           # При вызове метода setCoords из первого экземпляра класса pt, Self будет ссылаться на первый экземпляр pt
                           # При вызове метода setCoords из второго экземпляра класса pt, Self будет ссылаться на второй экземпляр pt
                           # При вызове метода setCoords из третьего экземпляра класса pt, Self будет ссылаться на третий экземпляр pt
                           # При использовании параметра Self мы можем знать из какого экземпляра класса был вызван данный метод

#Point.setCoords(6, 9)     # Error - если вызвать метод setCoords через класс Point, произойдет ошибка, т.к. первым аргументом нужно указать экземпляр
#Point.setCoords(pt, 6, 9) # т.к. первым аргументом нужно указать экземпляр
                           # pt.setCoords(5, 10)  = Point.setCoords(pt, 6, 9)  - строки эквивалентны между собой


# КОНСТРУКТОР
# Предположим, что в момент создания класса мы бы хотели указывать нужные координаты и прописывать их как локальные атрибуты этого экземпляра класса с помощью метода
# __init(self)__  конструктор, вызывается автоматически, когда создается экземпляр класса
class Point1:
    def __init__(self, c, d):    # Передадим через метод __init__ два аргумента
        self.c = c               # в теле метода __init__ создадим две переменные x, y
        self.d = d
    #    print("Создание экземпляра класса Point1") # Проверка создания экземпляра класса Point1

    c = 1; d = 1
    def setCoords(self, c, d):  # любой метод объявленный внутри класса имеет параметр self, ( с, d - передали в качестве следующих параметров)
        self.e = c              # с помощью метода setCoords можем переопределять координаты точки класса Point и присвоим переданное значение c, d
        self.f = d

pt = Point1(55, 100)             # в момент создания экземпляра класса выполняется ф-ция def __init__(self):, и значит метод  __init__ был выполнен
print("constructor __init__:", pt.__dict__)
pt1 = Point1(51, 101)
print("constructor __init__:", pt1.__dict__)



# Гибкое создание экземпляров класса - присвоим начальное значение x, y = 0 - тогда можно вызывать конструктор
class Point2:
    def __init__(self, x = 0, y = 0):    # Передадим через метод __init__ два аргумента
        self.x = x                       # в теле метода __init__ создадим две переменные x, y
        self.y = y
    #    print("Создание экземпляра класса Point2") # Проверка создания экземпляра класса Point2

    x = 1; y = 1
    def setCoords(self, x, y):  # любой метод объявленный внутри класса имеет параметр self, ( с, d - передали в качестве следующих параметров)
        self.a = x              # с помощью метода setCoords можем переопределять координаты точки класса Point и присвоим переданное значение c, d
        self.b = y

                                # в момент создания экземпляра класса выполняется ф-ция def __init__(self):, и значит метод  __init__ был выполнен
pt = Point2()                   # создание экземпляра класса Point2 без параметров
pt1 = Point2(7)                 # создание экземпляра класса Point2 с одним параметром
pt2 = Point2(7, 8)              # создание экземпляра класса Point2 с одним параметром
print("constructor __init__:", pt.__dict__, pt1.__dict__, pt2.__dict__)
print("constructor __init__:", pt.__dict__, pt1.__dict__, pt2.__dict__, sep="\n")

# ДЕСТРУКТОР
# __del(self)__ - вызывается в тот момент, когда экземпляр класса уничтожается
class Point3:
    def __init__(self, x = 0, y = 0):    # Передадим через метод __init__ два аргумента
        self.x = x                       # в теле метода __init__ создадим две переменные x, y
        self.y = y
    #    print("Создание экземпляра класса Point2") # Проверка создания экземпляра класса Point2

    def __del__(self):           # прописали деструктор
        print("Удаление экземпляра: " + self.__str__()) # увидим какой экземпляр удаляется

    x = 1; y = 1
    def setCoords(self, x, y):  # любой метод объявленный внутри класса имеет параметр self, ( с, d - передали в качестве следующих параметров)
        self.a = x              # с помощью метода setCoords можем переопределять координаты точки класса Point и присвоим переданное значение c, d
        self.b = y

                                # в момент создания экземпляра класса выполняется ф-ция def __init__(self):, и значит метод  __init__ был выполнен
pt = Point3()                   # создание экземпляра класса Point3 без параметров
pt1 = Point3(9)                 # создание экземпляра класса Point3 с одним параметром
pt2 = Point3(11, 13)            # создание экземпляра класса Point3 с одним параметром
print("destructor __del__:", pt.__dict__, pt1.__dict__, pt2.__dict__)
# происходило удаление объектов с разными адресами, т.е. разных объектов
# пока на какой-то объект имеется внешняя ссылка, он продолжает существовать
# если на объект нет внешних ссылок, он автоматически уничтожается сборщиком мусора

pt3 = Point3()                  # создали объект, на него ссылается переменная pt3
pt3 = 0                         # переопределили переменную pt3, она уже не будет ссылаться на этот экземпляр класса, а значит
                                # этот экземпляр класса после этого будет удален
#print("destructor __del__:", pt3.__dict__)

# Python - создание экземпляров класса через конструктор __init__
#        - контролировать его удаление через деструктор __del__